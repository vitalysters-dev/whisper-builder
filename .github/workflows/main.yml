# Имя нашего "рецепта"
name: Build Optimized Whisper.cpp for CoreELEC

# Триггер: запускать сборку при каждом коммите
on:
  push:
    branches:
      - main # Если ваша основная ветка называется 'master', измените 'main' на 'master'

jobs:
  build:
    # Запускать на самой свежей версии Ubuntu
    runs-on: ubuntu-latest

    steps:
      # Шаг 1: Установка необходимых инструментов
      - name: Install Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y git make cmake g++-aarch64-linux-gnu libopenblas-dev

      # Шаг 2: Скачиваем исходный код whisper.cpp
      - name: Clone whisper.cpp repository
        uses: actions/checkout@v4
        with:
          repository: ggerganov/whisper.cpp
          submodules: true # Важно для скачивания всех зависимостей

      # Шаг 3: Компиляция по ОФИЦИАЛЬНОЙ инструкции с CMake (ИСПРАВЛЕНО)
      - name: Compile with CMake, OpenBLAS and Optimizations
        run: |
          # Создаем и переходим в папку для сборки
          mkdir build && cd build

          # Запускаем CMake для генерации проекта
          # DCMAKE_C_COMPILER и DCMAKE_CXX_COMPILER: указываем кросс-компиляторы
          # DCMAKE_CXX_FLAGS: передаем флаги оптимизации
          # DWHISPER_OPENBLAS=ON: включаем поддержку OpenBLAS
          cmake .. \
            -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc \
            -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++ \
            -DCMAKE_CXX_FLAGS="-O3 -mtune=cortex-a53" \
            -DWHISPER_OPENBLAS=ON

          # Запускаем make для компиляции
          make -j$(nproc) main

      # Шаг 4: Упаковываем готовый файл 'main'
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: optimized-whisper-main
          path: build/bin/main
