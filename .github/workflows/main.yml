# Имя нашего "рецепта"
name: Build Optimized Whisper.cpp for CoreELEC

# Триггер: запускать сборку при каждом коммите
on:
  push:
    branches:
      - main # Если ваша основная ветка называется 'master', измените 'main' на 'master'

jobs:
  build:
    # Запускать на самой свежей версии Ubuntu
    runs-on: ubuntu-latest

    steps:
      # Шаг 1: Установка необходимых инструментов
      - name: Install Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y git make cmake g++-aarch64-linux-gnu libopenblas-dev

      # Шаг 2: Скачиваем исходный код whisper.cpp
      - name: Clone whisper.cpp repository
        uses: actions/checkout@v4
        with:
          repository: ggerganov/whisper.cpp
          submodules: true

      # Шаг 3: Компиляция со статической линковкой (ИСПРАВЛЕНО)
      - name: Compile with CMake, OpenBLAS and Static Linking
        run: |
          mkdir build && cd build
          # Добавлены флаги для статической линковки:
          # -DBUILD_SHARED_LIBS=OFF: Отключаем сборку динамических библиотек
          # -DCMAKE_EXE_LINKER_FLAGS="-static": Приказываем линковщику включить все в .exe
          cmake .. \
            -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc \
            -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++ \
            -DCMAKE_CXX_FLAGS="-O3 -mtune=cortex-a53" \
            -DWHISPER_OPENBLAS=ON \
            -DBUILD_SHARED_LIBS=OFF \
            -DCMAKE_EXE_LINKER_FLAGS="-static"

          # Собираем цель 'main'
          make -j$(nproc) main

      # Шаг 4: Упаковываем готовый файл 'main'
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: optimized-whisper-main
          path: build/bin/main
